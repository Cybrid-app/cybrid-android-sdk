version: 2.1

orbs:
  codecov: codecov/codecov@3.2.4
  android: circleci/android@2.1.2

parameters:
  GHA_Event:
    type: string
    default: ""
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""

jobs:

  android-sdk-test:
    docker:
      - image: cimg/android:2022.09.2
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Download Dependencies
          command: |
            ./gradlew SDKAndroid:androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Run SDK Unit Test
          command: |
            ./gradlew koverXmlReport
      - store_artifacts:
          path: SDKAndroid/build/reports/kover/project-xml/report.xml
          destination: reports
      - codecov/upload:
          file: 'SDKAndroid/build/reports/kover/project-xml/report.xml'

  android-e2e:
    executor:
      name: android/android-machine
      resource-class: large
      tag: 2021.10.1
    steps:
      - checkout
      - android/create-avd:
          avd-name: myavd
          install: true
          system-image: system-images;android-29;default;x86
      - android/start-emulator:
          avd-name: myavd
          no-window: true
          restore-gradle-cache-prefix: v1a
      - run:
          name: Run UI Test
          command: |
            ./gradlew app:connectedDebugAndroidTest
      - run:
          name: Run Unit Test
          command: |
            ./gradlew app:testDebugUnitTest
      - android/save-gradle-cache:
          cache-prefix: v1a

  android-sdk-publish:
    docker:
      - image: cimg/android:2022.09.2
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - when:
          condition:
            and:
              - equal: [ main, << pipeline.git.branch >> ]
          steps:
            - restore_cache:
                key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
            - run:
                name: Download Dependencies
                command: |
                  ./gradlew SDKAndroid:androidDependencies
            - save_cache:
                paths:
                  - ~/.gradle
                key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
            - run:
                name: Update version tag
                command: |
                  export TAG=$(git describe --tags --abbrev=0)
                  sed -i "s/0.0.0/$TAG/" version.gradle
            - run:
                name: Publish Library
                command: |
                  ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository

  firebase-robo:
    docker:
      - image: cimg/android:2022.09.2
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Download Dependencies
          command: |
              ./gradlew SDKAndroid:androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Compile Debug App
          command: |
              ./gradlew app:assembleDebug
      - store_artifacts:
          path: app/build/outputs/apk/debug/app-debug.apk
          destination: debugAPK
      - run:
          name: Set Firabse FIREBASE_SERVICE_ACCOUNT_KEY
          command: echo ${FIREBASE_SERVICE_ACCOUNT_KEY} | base64 -di > ${HOME}/client-secret.json
      - run:
          name: Authenticate with Google Cloud
          command: |
              sudo gcloud auth activate-service-account --key-file ${HOME}/client-secret.json
              sudo gcloud --quiet config set project ${FIREBASE_PROJECT_ID}
      - run:
          name: Test with Firebase Test Lab
          command: |
              sudo gcloud firebase test android run \
               --type robo \
               --app app/build/outputs/apk/debug/app-debug.apk \
               --device model=redfin,version=30,locale=en,orientation=portrait \
               --timeout 10m

  demo-app-publish:
    docker:
      - image: cimg/android:2022.09.2
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - run:
          name: Install brew
          command: |
              sudo apt-get install build-essential curl file git
              sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
              echo 'export PATH="/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin/:$PATH"' >> $BASH_ENV
              echo 'export MANPATH="/home/linuxbrew/.linuxbrew/share/man:$MANPATH"' >> $BASH_ENV
              echo 'export INFOPATH="/home/linuxbrew/.linuxbrew/share/info:$INFOPATH"' >> $BASH_ENV
      - run:
          name: Install Appetize
          command: |
              brew install YusukeIwaki/appetize/appetize
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Download Dependencies
          command: |
              ./gradlew SDKAndroid:androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      - run:
          name: Compile Debug App
          command: |
              ./gradlew app:assembleDebug
      - store_artifacts:
          path: app/build/outputs/apk/debug/app-debug.apk
          destination: debugAPK
      - run:
          name: Upload app to Appetize
          command: |
              appetize upload ${APPETIZE_PUBLIC_API_TOKEN} app/build/outputs/apk/debug/app-debug.apk --platform=android --token=${APPETIZE_API_TOKEN}

workflows:
  android-test:
    jobs:
      - android-sdk-test
      - android-e2e
      - android-sdk-publish:
          requires:
            - android-sdk-test
            - android-e2e
          filters:
            branches:
              only:
                - main
      - firebase-robo:
          filters:
            branches:
              only:
                - main
      - demo-app-publish